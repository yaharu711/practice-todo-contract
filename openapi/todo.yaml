openapi: 3.0.3
info:
  title: Todo API
  version: 1.0.0
  description: Simple Todo management API providing CRUD operations for todos.
  contact:
    name: API Team
    url: https://example.com
    email: api@example.com
servers:
  - url: http://localhost:8080
tags:
  - name: Todos
    description: Operations related to todos
paths:
  /todos:
    get:
      tags: [Todos]
      operationId: getTodos
      summary: List todos
      description: Returns a pageless list of all todos.
      responses:
        "200":
          description: ok
          content:
            application/json:
              schema:
                type: array
                items: { $ref: "#/components/schemas/Todo" }
        "404": { $ref: "#/components/responses/NotFound" }
        "500": { $ref: "#/components/responses/InternalServerError" }
    post:
      tags: [Todos]
      operationId: postTodos
      summary: Create a todo
      description: Creates a new todo and returns its location.
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/TodoCreate" }
      responses:
        "201":
          description: created
          headers:
            Location:
              description: URL of the created resource
              schema: { type: string }
        "400": { $ref: "#/components/responses/BadRequest" }
        "404": { $ref: "#/components/responses/NotFound" }
        "500": { $ref: "#/components/responses/InternalServerError" }
  /todos/{id}:
    parameters:
      - in: path
        name: id
        required: true
        description: Todo identifier (UUID)
        schema: { type: string, format: uuid }
    get:
      tags: [Todos]
      operationId: getTodo
      summary: Get a todo
      description: Retrieves a single todo by its identifier.
      responses:
        "200":
          description: ok
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Todo" }
        "404": { $ref: "#/components/responses/NotFound" }
        "500": { $ref: "#/components/responses/InternalServerError" }
    patch:
      tags: [Todos]
      operationId: patchTodo
      summary: Update fields of a todo
      description: Partially updates fields of an existing todo.
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/TodoPatch" }
      responses:
        "200":
          description: updated
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Todo" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "404": { $ref: "#/components/responses/NotFound" }
        "500": { $ref: "#/components/responses/InternalServerError" }
    delete:
      tags: [Todos]
      operationId: deleteTodo
      summary: Delete a todo
      description: Deletes a todo identified by the provided id.
      responses:
        "204": { description: deleted }
        "404": { $ref: "#/components/responses/NotFound" }
        "500": { $ref: "#/components/responses/InternalServerError" }
components:
  schemas:
    Todo:
      type: object
      required: [id, title, completed, createdAt]
      properties:
        id: { type: string, format: uuid }
        title:
          type: string
          minLength: 1
          maxLength: 500
          pattern: '^(?=.*\S)[\s\S]+$'
          description: "前後の空白はトリムし、空白のみは不可"
          example: "buy milk"
        completed: { type: boolean, example: false }
        createdAt: { type: string, format: date-time }
    TodoCreate:
      type: object
      required: [title, completed]
      properties:
        title:
          type: string
          minLength: 1
          maxLength: 500
          pattern: '^(?=.*\S)[\s\S]+$'
          description: "前後の空白はトリムし、空白のみは不可"
        completed: { type: boolean, default: false }
    TodoPatch:
      type: object
      required: [title, completed]
      properties:
        title:
          type: string
          minLength: 1
          maxLength: 500
          pattern: '^(?=.*\S)[\s\S]+$'
          description: "前後の空白はトリムし、空白のみは不可"
        completed: { type: boolean }
    ValidationErrorDetail:
      type: object
      required: [message, property]
      properties:
        message: { type: string, example: "May not be empty" }
        property: { type: string, example: "messages[0].text" }
    ValidationError:
      type: object
      required: [message, details]
      properties:
        message: { type: string, example: "The request body has 2 error(s)" }
        details:
          type: array
          items: { $ref: "#/components/schemas/ValidationErrorDetail" }
  responses:
    NotFound:
      description: Not found
      content:
        application/json:
          schema:
            type: object
            properties:
              message: { type: string, example: "Not Found" }
    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            type: object
            properties:
              message: { type: string, example: "Internal Server Error" }
    BadRequest:
      description: Invalid request body
      content:
        application/json:
          schema: { $ref: "#/components/schemas/ValidationError" }
          example:
            message: "The request body has 2 error(s)"
            details:
              - message: "May not be empty"
                property: "messages[0].text"
              - message: "Must be one of the following values: [text, image, video, audio, location, sticker, template, imagemap]"
                property: "messages[1].type"
